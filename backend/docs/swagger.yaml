openapi: 3.0.0
info:
  title: E-commerce Clothes API
  version: 1.0.0
  description: API documentation for E-commerce Clothes application
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://your-production-url.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        price:
          type: number
        discountPrice:
          type: number
        description:
          type: string
        countInStock:
          type: integer
        category:
          type: string
        brand:
          type: string
        sizes:
          type: array
          items:
            type: string
        colors:
          type: array
          items:
            type: string
        collections:
          type: string
        material:
          type: string
        gender:
          type: string
          enum: [men, women, unisex]
        images:
          type: array
          items:
            type: string
        isFeatured:
          type: boolean
        isPublished:
          type: boolean
        tags:
          type: array
          items:
            type: string
        dimensions:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Cart:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              product:
                $ref: '#/components/schemas/Product'
              quantity:
                type: integer
              size:
                type: string
              color:
                type: string
        totalAmount:
          type: number
        createdAt:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        items:
          type: array
          items:
            type: object
        shippingAddress:
          type: object
          properties:
            fullName:
              type: string
            address:
              type: string
            city:
              type: string
            postalCode:
              type: string
            country:
              type: string
        paymentMethod:
          type: string
        paymentResult:
          type: object
        totalPrice:
          type: number
        isPaid:
          type: boolean
        paidAt:
          type: string
          format: date-time
        isDelivered:
          type: boolean
        deliveredAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]

    Error:
      type: object
      properties:
        message:
          type: string
        error:
          type: string

tags:
  - name: Users
    description: User authentication and management
  - name: Products
    description: Product catalog management
  - name: Cart
    description: Shopping cart operations
  - name: Checkout
    description: Checkout and payment processing
  - name: Orders
    description: Order management
  - name: Upload
    description: File upload operations
  - name: Admin - Users
    description: Admin user management
  - name: Admin - Products
    description: Admin product management
  - name: Admin - Orders
    description: Admin order management
  - name: Subscription
    description: Newsletter subscription

paths:
  # User Routes
  /api/users/register:
    post:
      tags: [Users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  minLength: 6
                  example: "password123"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: User already exists or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/login:
    post:
      tags: [Users]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
                password:
                  type: string
                  example: "8di0ha66"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/profile:
    get:
      tags: [Users]
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Product Routes
  /api/products:
    get:
      tags: [Products]
      summary: Get all products with optional filters
      parameters:
        - in: query
          name: collection
          schema:
            type: string
          description: Filter by collection
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category
        - in: query
          name: brand
          schema:
            type: string
          description: Filter by brand (comma-separated)
        - in: query
          name: size
          schema:
            type: string
          description: Filter by size (comma-separated)
        - in: query
          name: color
          schema:
            type: string
          description: Filter by color
        - in: query
          name: gender
          schema:
            type: string
          description: Filter by gender (men/women)
        - in: query
          name: minPrice
          schema:
            type: number
          description: Minimum price filter
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Maximum price filter
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 12
          description: Number of products per page
        - in: query
          name: sort
          schema:
            type: string
            enum: [price_asc, price_desc, name_asc, name_desc, newest, oldest]
          description: Sort products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  totalProducts:
                    type: integer
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: [Products]
      summary: Create a new product (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - description
                - countInStock
                - category
                - brand
              properties:
                name:
                  type: string
                price:
                  type: number
                discountPrice:
                  type: number
                description:
                  type: string
                countInStock:
                  type: integer
                category:
                  type: string
                brand:
                  type: string
                sizes:
                  type: array
                  items:
                    type: string
                colors:
                  type: array
                  items:
                    type: string
                collections:
                  type: string
                material:
                  type: string
                gender:
                  type: string
                images:
                  type: array
                  items:
                    type: string
                isFeatured:
                  type: boolean
                isPublished:
                  type: boolean
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
        '403':
          description: Admin access required

  /api/products/best-seller:
    get:
      tags: [Products]
      summary: Get best selling products
      responses:
        '200':
          description: List of best selling products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /api/products/new-arrivals:
    get:
      tags: [Products]
      summary: Get new arrival products
      responses:
        '200':
          description: List of new arrival products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /api/products/{id}:
    get:
      tags: [Products]
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    put:
      tags: [Products]
      summary: Update product (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '401':
          description: Unauthorized
        '403':
          description: Admin access required

    delete:
      tags: [Products]
      summary: Delete product (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found
        '401':
          description: Unauthorized
        '403':
          description: Admin access required

  /api/products/similar/{id}:
    get:
      tags: [Products]
      summary: Get similar products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        '200':
          description: List of similar products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  # Cart Routes
  /api/cart:
    get:
      tags: [Cart]
      summary: Get user's cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized

    post:
      tags: [Cart]
      summary: Add item to cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
                  minimum: 1
                size:
                  type: string
                color:
                  type: string
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized

    put:
      tags: [Cart]
      summary: Update cart item quantity
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: Cart updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

    delete:
      tags: [Cart]
      summary: Clear entire cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart cleared successfully

  /api/cart/merge:
    post:
      tags: [Cart]
      summary: Merge guest cart with user cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                guestCartItems:
                  type: array
                  items:
                    type: object
      responses:
        '200':
          description: Carts merged successfully

  # Checkout Routes
  /api/checkout:
    post:
      tags: [Checkout]
      summary: Create checkout session
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
                - shippingAddress
              properties:
                items:
                  type: array
                  items:
                    type: object
                shippingAddress:
                  type: object
                  properties:
                    fullName:
                      type: string
                    address:
                      type: string
                    city:
                      type: string
                    postalCode:
                      type: string
                    country:
                      type: string
      responses:
        '201':
          description: Checkout session created
          content:
            application/json:
              schema:
                type: object
                properties:
                  checkoutId:
                    type: string
                  totalAmount:
                    type: number

  /api/checkout/{checkoutId}/pay:
    post:
      tags: [Checkout]
      summary: Process payment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: checkoutId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod:
                  type: string
                paymentResult:
                  type: object
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  # Order Routes
  /api/orders/my-orders:
    get:
      tags: [Orders]
      summary: Get user's orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user's orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /api/orders/{orderId}:
    get:
      tags: [Orders]
      summary: Get order by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

  # Upload Routes
  /api/upload:
    post:
      tags: [Upload]
      summary: Upload image
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  imageUrl:
                    type: string

  # Newsletter Subscription
  /api/subscribe:
    post:
      tags: [Subscription]
      summary: Subscribe to newsletter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Subscribed successfully

  # Admin Routes - Users
  /api/admin/users:
    get:
      tags: [Admin - Users]
      summary: Get all users (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Admin access required

    post:
      tags: [Admin - Users]
      summary: Create new user (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '201':
          description: User created successfully

  /api/admin/users/{id}:
    get:
      tags: [Admin - Users]
      summary: Get user by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags: [Admin - Users]
      summary: Update user (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully

    delete:
      tags: [Admin - Users]
      summary: Delete user (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully

  # Admin Routes - Products
  /api/admin/products:
    get:
      tags: [Admin - Products]
      summary: Get all products for admin (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /api/admin/products/{id}:
    put:
      tags: [Admin - Products]
      summary: Update product (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully

    delete:
      tags: [Admin - Products]
      summary: Delete product (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully

  # Admin Routes - Orders
  /api/admin/orders:
    get:
      tags: [Admin - Orders]
      summary: Get all orders (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /api/admin/orders/{id}:
    get:
      tags: [Admin - Orders]
      summary: Get order by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

    put:
      tags: [Admin - Orders]
      summary: Update order status (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, processing, shipped, delivered, cancelled]
                isDelivered:
                  type: boolean
                deliveredAt:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Order updated successfully
